import{_ as k}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as d,c as m,e as p,b as n,d as s,w as a,f as l}from"./app-49149863.js";const v={},b=n("h1",{id:"the-libft-project",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#the-libft-project","aria-hidden":"true"},"#"),s(" The libft Project")],-1),f=n("p",null,"This is the first project during cursus period. I will record all my processes for doing this project.",-1),h=n("h2",{id:"the-flowchar-for-processing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#the-flowchar-for-processing","aria-hidden":"true"},"#"),s(" The flowchar for processing")],-1),_=n("h2",{id:"all-the-functions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#all-the-functions","aria-hidden":"true"},"#"),s(" All the functions")],-1),y={id:"part1-libc-functions",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#part1-libc-functions","aria-hidden":"true"},"#",-1),g={href:"https://man7.org/linux/man-pages/man3/isspace.3.html",target:"_blank",rel:"noopener noreferrer"},q=l(`<table><thead><tr><th>function name</th><th>ft_name</th><th>piscine project</th><th>External Function</th><th>file</th><th style="text-align:left;">prototype</th><th style="text-align:left;">desc</th></tr></thead><tbody><tr><td>isalpha</td><td>ft_isalpha</td><td>C02/ex02</td><td>None</td><td>ft_ctype.c</td><td style="text-align:left;">int isalpha(int c);</td><td style="text-align:left;">test whether the ascii code is for alphabet</td></tr><tr><td>isdigit</td><td>ft_isdigit</td><td>C02/ex03</td><td>None</td><td>ft_ctype.c</td><td style="text-align:left;">int isdigit(int c);</td><td style="text-align:left;">test whether the ascii code is for digit</td></tr><tr><td>isalnum</td><td>ft_isalnum</td><td>-</td><td>None</td><td>ft_ctype.c</td><td style="text-align:left;">int isalnum(int c);</td><td style="text-align:left;">equals to (isalpha() or isdigit ())</td></tr><tr><td>isascii</td><td>ft_isascii</td><td></td><td>None</td><td>ft_ctype.c</td><td style="text-align:left;">int isascii(int c)</td><td style="text-align:left;">test whether the code is an ascii code</td></tr><tr><td>isprint</td><td>ft_isprint</td><td>C02/ex06</td><td>None</td><td>ft_ctype.c</td><td style="text-align:left;">int isprint(int c);</td><td style="text-align:left;">test whether the character is printable</td></tr><tr><td>strlen</td><td>ft_strlen</td><td>C04/ex00</td><td>None</td><td>ft_string_1.c</td><td style="text-align:left;">size_t strlen(const char *s)</td><td style="text-align:left;">test the length of string s &lt;string.h&gt;</td></tr><tr><td>memset</td><td>ft_memset</td><td>-</td><td>None</td><td>ft_string_1.c</td><td style="text-align:left;">void *memset(void *b, int c, size_t len);</td><td style="text-align:left;">writes len bytes of value c(converted to an unsigned char to the string b) &lt;string.h&gt;</td></tr><tr><td>bzero</td><td>ft_bzero</td><td>-</td><td>None</td><td>ft_string_1.c</td><td style="text-align:left;">void bzero(void *s, size_t n);</td><td style="text-align:left;">writes n zeroed bytes to the string s. &lt;strings.h&gt;</td></tr><tr><td>memcpy</td><td>ft_memcpy</td><td>-</td><td>None</td><td>ft_string_1.c</td><td style="text-align:left;">void *memcpy(void *restrict dst, const void *restrict src, size_t n)</td><td style="text-align:left;">copy n bytes from src to dst</td></tr><tr><td>memmove</td><td>ft_memmove</td><td>-</td><td>None</td><td>ft_string_1.c</td><td style="text-align:left;">void *memmove(void *dst, const void *src, size_t len);</td><td style="text-align:left;">copy len bytes from string src to dst.</td></tr><tr><td>strlcpy</td><td>ft_strlcpy</td><td>C02/ex10</td><td>None</td><td>ft_string_2.c</td><td style="text-align:left;">size_t strlcpy(char * restrict dst, const char * restrict src, size_t dstsize);</td><td style="text-align:left;">copy up to dstsize-1 characters from src to dst, NUL-terminateing the result if dstsize is not 0.</td></tr><tr><td>strlcat</td><td>ft_strlcat</td><td>C03/ex02</td><td>None</td><td>ft_string_2.c</td><td style="text-align:left;">size_t strlcpy(char * restrict dst, const char * restrict src, size_t dstsize);</td><td style="text-align:left;">append src to the end of dst.</td></tr><tr><td>toupper</td><td>ft_toupper</td><td>C02/ex05</td><td>None</td><td>ft_string_2.c</td><td style="text-align:left;">int toupper(int c);</td><td style="text-align:left;">convert lower case to upper case</td></tr><tr><td>tolower</td><td>ft_tolower</td><td>C02/ex04</td><td>None</td><td>ft_string_2.c</td><td style="text-align:left;">int tolower(int c);</td><td style="text-align:left;">convert upper case to lower case</td></tr><tr><td>strchr</td><td>ft_strchr</td><td>-</td><td>None</td><td>ft_string_2.c</td><td style="text-align:left;">char *strchr(const char *s, int c);</td><td style="text-align:left;">locate the first occurrence of c(convert to a char)</td></tr><tr><td>strrchr</td><td>ft_strrchr</td><td>-</td><td>None</td><td>ft_string_3.c</td><td style="text-align:left;">char *strchr(const char *s, int c);</td><td style="text-align:left;">locate the last occurrence of c(conver to a char)</td></tr><tr><td>strncmp</td><td>ft_strncmp</td><td>C03/ex01</td><td>None</td><td>ft_string_3.c</td><td style="text-align:left;">int strncmp(const char *s1, const char *s2, size_t n</td><td style="text-align:left;">compare the two strings at most lenght of n</td></tr><tr><td>memchr</td><td>ft_memchr</td><td>-</td><td>None</td><td>ft_string_3.c</td><td style="text-align:left;">void *memchr(const void *s, int c, size_t n);</td><td style="text-align:left;">locates the first occurrence of c(convert to an unsigned char)</td></tr><tr><td>memcmp</td><td>ft_memcmp</td><td>-</td><td>None</td><td>ft_string_3.c</td><td style="text-align:left;">int memcmp(const void *s1, const void *s2, size_t n);</td><td style="text-align:left;">compares types string s1 aganst byte s2, return the difference if different</td></tr><tr><td>strnstr</td><td>ft_strnstr</td><td>-</td><td>None</td><td>ft_string_3.c</td><td style="text-align:left;">char *strnstr(const char *haystack, const char *needle, size_t len);</td><td style="text-align:left;">find the first occurrence of the null-terminated string needle</td></tr><tr><td>atoi</td><td>ft_atoi</td><td>C04/ex03</td><td>None</td><td>ft_stdlib.c</td><td style="text-align:left;">int atoi(const char *str);</td><td style="text-align:left;">&lt;stdlib.h&gt;</td></tr><tr><td>calloc</td><td>ft_calloc</td><td>-</td><td>malloc</td><td>ft_stdlib.c</td><td style="text-align:left;">void calloc(size_t count, size_t size);</td><td style="text-align:left;">contiguously alocates enough space for count objects that are size bytes of memory each</td></tr><tr><td>strdup</td><td>ft_strdup</td><td>C07/ex00</td><td>malloc</td><td>ft_stdlib.c</td><td style="text-align:left;">char *strdup(const char *s1);</td><td style="text-align:left;">allocates sufficient memory for a copy of string s1</td></tr></tbody></table><h3 id="part2-additional-functions" tabindex="-1"><a class="header-anchor" href="#part2-additional-functions" aria-hidden="true">#</a> Part2 (Additional functions)</h3><table><thead><tr><th>ft_name</th><th>prototype</th></tr></thead><tbody><tr><td>ft_substr</td><td>char *ft_substr(char const *s, unsigned int start, size_t len);</td></tr><tr><td>ft_strjoin</td><td>char *ft_strjoin(char const *s1, char const *s2);</td></tr><tr><td>ft_strtrim</td><td>char *ft_strtrim(char const *s1, char const *set);</td></tr><tr><td>ft_split</td><td>char **ft_split(char const *s, char c);</td></tr><tr><td>ft_itoa</td><td>char *ft_itoa(int n);</td></tr><tr><td>ft_strmapi</td><td>char *ft_strmapi(char const *s, char (*f)(unsigned int, char));</td></tr><tr><td>ft_striteri</td><td>void ft_striteri(char *s, void (<em>f)(unsigned int, char</em>));</td></tr><tr><td>ft_putchar_fd</td><td>void ft_putchar_fd(char c, int fd);</td></tr><tr><td>ft_putstr_fd</td><td>void ft_putstr_fd(char *s, int fd);</td></tr><tr><td>ft_putendl_fd</td><td>void ft_putendl_fd(char *s, int fd);</td></tr><tr><td>ft_putnbr_fd</td><td>void ft_putnbr_fd(int n, int fd);</td></tr></tbody></table><h3 id="part3-additional-functions" tabindex="-1"><a class="header-anchor" href="#part3-additional-functions" aria-hidden="true">#</a> Part3 (Additional functions)</h3><p>Functions to manipulate memory and strings is very useful. But you will soon discover<br> that manipulating lists is even more useful.<br> You have to use the following structure to represent a node of your list. Add its declaration to your <code>libft.h</code> file:<br> The members of the t_list struct are:</p><ul><li>content: The data contained in the node.<br><code>void *</code> allows to store any kind of data.<br><code>next</code>: The address of the next node, or NULL if the next node is the last one.</li></ul><p>In your Makefile, add a make <strong>bonus rule</strong> to add the bonus functions to your libft.a.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_list</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>content<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">s_list</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>ft_name</th><th>prototype</th></tr></thead><tbody><tr><td>ft_lstnew</td><td>t_list *ft_lstnew(void *content);</td></tr><tr><td>ft_lstadd_front</td><td>void ft_lstadd_front(t_list **lst, t_list *new);</td></tr><tr><td>ft_lstsize</td><td>int ft_lstsize(t_list *lst);</td></tr><tr><td>ft_lstlast</td><td>t_list *ft_lstlast(t_list *lst);</td></tr><tr><td>ft_lstadd_back</td><td>void ft_lstadd_back(t_list **lst, t_list *new);</td></tr><tr><td>ft_lstdelone</td><td>void ft_lstdelone(t_list *lst, void (<em>del)(void</em>));</td></tr><tr><td>ft_lstclear</td><td>void ft_lstclear(t_list **lst, void (<em>del)(void</em>));</td></tr><tr><td>ft_lstiter</td><td>void ft_lstiter(t_list *lst, void (*f)(void *));</td></tr><tr><td>ft_lstmap</td><td>t_list *ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *));</td></tr></tbody></table><h2 id="other-key-requirements" tabindex="-1"><a class="header-anchor" href="#other-key-requirements" aria-hidden="true">#</a> Other key requirements</h2><table><thead><tr><th>Requriement</th><th style="text-align:left;">Desc</th></tr></thead><tbody><tr><td><strong>Program name</strong></td><td style="text-align:left;">libft.a</td></tr><tr><td><strong>Turn in files</strong></td><td style="text-align:left;">Makefile, libft.h, ft_*.c</td></tr><tr><td><strong>Makefile</strong></td><td style="text-align:left;">NAME, all, clean, fclean, re</td></tr><tr><td><strong>Description</strong></td><td style="text-align:left;">Write your own library: a collection of functions that will be a useful tool for your cursus.</td></tr></tbody></table><ul><li>All heap allocated memory space must be properly freed when necessary. No leaks will be tolerated.</li><li>If the subject requires it, you must submit a <code>Makefile</code> which will compile your source files to the required output with the flags <code>-Wall, -Wextra</code> and <code>-Werror</code>, use <code>cc</code>, and your <code>Makefile</code> must <strong>not relink</strong>.</li><li>Your Makefile must at least contain the rules $(NAME), all, clean, fclean and<br> re.</li><li>To turn in bonuses to your project, you must include a rule <code>bonus</code> to your Makefile, which will add all the various headers, librairies or functions that are forbidden on the main part of the project. Bonuses must be in a different <code>file _bonus.{c/h}</code> if the subject does not specify anything else. Mandatory and bonus part evaluation is done separately.</li><li>If your project allows you to use your <code>libft</code>, you must copy its sources and its associated Makefile in a libft folder with its associated Makefile. Your project’s Makefile must compile the library by using its Makefile, then compile the project.</li><li>Your <code>libft.a</code> has to be created at the <strong>root of your repository</strong>.</li><li>You must use the command <code>ar</code> to create your library. Using the libtool command is forbidden.</li><li>Turning in unused files is forbidden</li><li>Place all your files at the <span style="color:orange;">root of your repository</span>.</li><li>Declaring global variables is forbidden.</li></ul><h2 id="implementation" tabindex="-1"><a class="header-anchor" href="#implementation" aria-hidden="true">#</a> Implementation</h2><p>There are three parts for the projects, the three parts will be split into three modules.</p><ul><li><strong>libft.h</strong> : contains all functions</li><li><strong>ft_part1.c</strong> : implement all functions in part 1 <ul><li>All the functions for this part come from three parts, which are <ul><li>ctype, string and stdlib</li><li>there are five functions come from ctype</li><li>there are fifteen functions come from string*</li><li>there are three functions come from stdlib</li><li>so all the functions will be splited into 4 c files, where are <code>ft_ctype.c</code>, <code>ft_string_1.c</code>, <code>ft_string_2.c</code>, <code>ft_string_3.c</code> and <code>ft_stdlib.c</code></li></ul></li></ul></li><li><strong>ft_part2.c</strong> : implement all functions in part 2</li><li><strong>ft_bonus.c</strong> : implement all functions in bonus part</li></ul><h3 id="part1-libc-functions-1" tabindex="-1"><a class="header-anchor" href="#part1-libc-functions-1" aria-hidden="true">#</a> Part1: Libc Functions</h3><h4 id="ft-ctype-c" tabindex="-1"><a class="header-anchor" href="#ft-ctype-c" aria-hidden="true">#</a> ft_ctype.c</h4>`,17),x=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"int"),s("	"),n("span",{class:"token function"},"ft_isalpha"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" c"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),s("	ch"),n("span",{class:"token punctuation"},";"),s(`

	ch `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),n("span",{class:"token punctuation"},")"),s("c"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("ch "),n("span",{class:"token operator"},">="),s(),n("span",{class:"token char"},"'A'"),s(),n("span",{class:"token operator"},"&&"),s(" ch "),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token char"},"'Z'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token punctuation"},"("),s("ch "),n("span",{class:"token operator"},">="),s(),n("span",{class:"token char"},"'a'"),s(),n("span",{class:"token operator"},"&&"),s(" ch "),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token char"},"'z'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),z=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"int"),s("	"),n("span",{class:"token function"},"ft_isdigit"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" c"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),s("	ch"),n("span",{class:"token punctuation"},";"),s(`

	ch `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),n("span",{class:"token punctuation"},")"),s("c"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("ch "),n("span",{class:"token operator"},">="),s(),n("span",{class:"token char"},"'0'"),s(),n("span",{class:"token operator"},"&&"),s(" ch "),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token char"},"'9'"),n("span",{class:"token punctuation"},")"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"int"),s("	"),n("span",{class:"token function"},"ft_isalnum"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" c"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"ft_isalpha"),n("span",{class:"token punctuation"},"("),s("c"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token function"},"ft_isdigit"),n("span",{class:"token punctuation"},"("),s("c"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"int"),s("	"),n("span",{class:"token function"},"ft_isascii"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" c"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("c "),n("span",{class:"token operator"},">="),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},"&&"),s(" c "),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token number"},"127"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"int"),s("	"),n("span",{class:"token function"},"ft_isprint"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" c"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("c "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"31"),s(),n("span",{class:"token operator"},"&&"),s(" c "),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"127"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("h4",{id:"ft-string-1-c",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ft-string-1-c","aria-hidden":"true"},"#"),s(" ft_string_1.c")],-1),M=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[s("size_t	"),n("span",{class:"token function"},"ft_strlen"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),s("s"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	size_t	rc`),n("span",{class:"token punctuation"},";"),s(`

	rc `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("s "),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
		rc `),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("rc"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[s(`
`),n("span",{class:"token keyword"},"void"),s("	"),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"ft_memset"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),s("b"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" c"),n("span",{class:"token punctuation"},","),s(" size_t len"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	size_t			idx`),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),s("	"),n("span",{class:"token operator"},"*"),s("dst"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("len "),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	dst `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("b"),n("span",{class:"token punctuation"},";"),s(`
	idx `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("idx "),n("span",{class:"token operator"},"<"),s(" len"),n("span",{class:"token punctuation"},")"),s(`
		`),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("dst "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token punctuation"},"("),s("idx "),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),n("span",{class:"token punctuation"},")"),s("c"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"void"),s("	"),n("span",{class:"token function"},"ft_bzero"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),s("s"),n("span",{class:"token punctuation"},","),s(" size_t n"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	size_t	idx`),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"char"),s("	"),n("span",{class:"token operator"},"*"),s("dst"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("n "),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token function"},"ft_memset"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" n"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"void"),s("	"),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"ft_memcpy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),s("restrict dst"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),s("restrict src"),n("span",{class:"token punctuation"},","),s(" size_t n"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	size_t			idx`),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),s("	"),n("span",{class:"token operator"},"*"),s("udst"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),s("	"),n("span",{class:"token operator"},"*"),s("usrc"),n("span",{class:"token punctuation"},";"),s(`

	udst `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("dst"),n("span",{class:"token punctuation"},";"),s(`
	usrc `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("src"),n("span",{class:"token punctuation"},";"),s(`
	idx `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("idx "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("udst "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("usrc "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		idx `),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("dst"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),U=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"void"),s("	"),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"ft_memmove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),s("dst"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),s("src"),n("span",{class:"token punctuation"},","),s(" size_t len"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	size_t			idx`),n("span",{class:"token punctuation"},";"),s(`
	size_t			step`),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),s("	"),n("span",{class:"token operator"},"*"),s("cdst"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),s("	"),n("span",{class:"token operator"},"*"),s("csrc"),n("span",{class:"token punctuation"},";"),s(`

	cdst `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("dst"),n("span",{class:"token punctuation"},";"),s(`
	csrc `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("src"),n("span",{class:"token punctuation"},";"),s(`
	idx `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	step `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("cdst "),n("span",{class:"token operator"},">"),s(" csrc"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		step `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
		idx `),n("span",{class:"token operator"},"="),s(" len "),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("idx "),n("span",{class:"token operator"},"<"),s(" len "),n("span",{class:"token operator"},"&&"),s(" idx "),n("span",{class:"token operator"},">="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("cdst "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("csrc "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		idx `),n("span",{class:"token operator"},"+="),s(" step"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("dst"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=n("h4",{id:"ft-string-2-c",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ft-string-2-c","aria-hidden":"true"},"#"),s(" ft_string_2.c")],-1),I=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[s("size_t	"),n("span",{class:"token function"},"ft_strlcpy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),s("restrict dst"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),s("restrict src"),n("span",{class:"token punctuation"},","),s(" size_t dstsize"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	size_t	idx`),n("span",{class:"token punctuation"},";"),s(`
	size_t	src_len`),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("dstsize "),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	idx `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	src_len `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"ft_strlen"),n("span",{class:"token punctuation"},"("),s("src"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("idx "),n("span",{class:"token operator"},"<"),s(" dstsize "),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("idx "),n("span",{class:"token operator"},"<="),s(" src_len"),n("span",{class:"token punctuation"},")"),s(`
			`),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("dst "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("src "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"else"),s(`
			`),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("dst "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
		idx `),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("dst "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"ft_strlen"),n("span",{class:"token punctuation"},"("),s("src"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[s("size_t	"),n("span",{class:"token function"},"ft_strlcat"),n("span",{class:"token punctuation"},"("),s(`
		`),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),s("restrict dst"),n("span",{class:"token punctuation"},","),s(`
		`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),s("restrict src"),n("span",{class:"token punctuation"},","),s(`
		size_t dstsize`),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	size_t	dstr_size`),n("span",{class:"token punctuation"},";"),s(`
	size_t	src_size`),n("span",{class:"token punctuation"},";"),s(`
	size_t	ret`),n("span",{class:"token punctuation"},";"),s(`

	dstr_size `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"ft_strlen"),n("span",{class:"token punctuation"},"("),s("dst"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	src_size `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"ft_strlen"),n("span",{class:"token punctuation"},"("),s("src"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("dstsize "),n("span",{class:"token operator"},"<="),s(" dstr_size"),n("span",{class:"token punctuation"},")"),s(`
		ret `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("src_size "),n("span",{class:"token operator"},"+"),s(" dstsize"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"else"),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token function"},"ft_memcpy"),n("span",{class:"token punctuation"},"("),s("dst "),n("span",{class:"token operator"},"+"),s(" dstr_size"),n("span",{class:"token punctuation"},","),s(" src"),n("span",{class:"token punctuation"},","),s(" dstsize"),n("span",{class:"token operator"},"-"),s("dstr_size"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("dst "),n("span",{class:"token operator"},"+"),s(" dstsize "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
		ret `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("src_size "),n("span",{class:"token operator"},"+"),s(" dstr_size"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("ret"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"int"),s("	"),n("span",{class:"token function"},"ft_toupper"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" c"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("c "),n("span",{class:"token operator"},">="),s(),n("span",{class:"token char"},"'a'"),s(),n("span",{class:"token operator"},"&&"),s(" c "),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token char"},"'z'"),n("span",{class:"token punctuation"},")"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("c "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"32"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("c"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),V=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[s(`
`),n("span",{class:"token keyword"},"int"),s("	"),n("span",{class:"token function"},"ft_tolower"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" c"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("c "),n("span",{class:"token operator"},">="),s(),n("span",{class:"token char"},"'A'"),s(),n("span",{class:"token operator"},"&&"),s(" c "),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token char"},"'Z'"),n("span",{class:"token punctuation"},")"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("c "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"32"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("c"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Y=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[s(`
`),n("span",{class:"token keyword"},"char"),s("	"),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"ft_strchr"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),s("s"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" c"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"char"),s("	ele"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"char"),s("	"),n("span",{class:"token operator"},"*"),s("rc"),n("span",{class:"token punctuation"},";"),s(`

	ele `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"char"),n("span",{class:"token punctuation"},")"),s("c"),n("span",{class:"token punctuation"},";"),s(`
	rc `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("s"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("rc"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("rc "),n("span",{class:"token operator"},"=="),s(" c"),n("span",{class:"token punctuation"},")"),s(`
			`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("rc"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		rc `),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=n("h4",{id:"ft-string-3-c",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ft-string-3-c","aria-hidden":"true"},"#"),s(" ft_string_3.c")],-1),W=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"char"),s("	"),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"ft_strrchr"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),s("s"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" c"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"char"),s("	ele"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"char"),s("	"),n("span",{class:"token operator"},"*"),s("rc"),n("span",{class:"token punctuation"},";"),s(`

	rc `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},";"),s(`
	ele `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"char"),n("span",{class:"token punctuation"},")"),s(" c"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("s"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("s "),n("span",{class:"token operator"},"=="),s(" c"),n("span",{class:"token punctuation"},")"),s(`
			rc `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("s"),n("span",{class:"token punctuation"},";"),s(`
		s `),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("rc"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),G=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[s(`
`),n("span",{class:"token keyword"},"int"),s("	"),n("span",{class:"token function"},"ft_strncmp"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),s("s1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"char"),n("span",{class:"token operator"},"*"),s("s2"),n("span",{class:"token punctuation"},","),s(" size_t n"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	size_t	idx`),n("span",{class:"token punctuation"},";"),s(`

	idx `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("s1 "),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token operator"},"*"),s("s2 "),n("span",{class:"token operator"},"&&"),s(" idx "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("s1 "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("s2 "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
			`),n("span",{class:"token keyword"},"break"),s(),n("span",{class:"token punctuation"},";"),s(`
		idx `),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("idx "),n("span",{class:"token operator"},"=="),s(" n"),n("span",{class:"token punctuation"},")"),s(`
		idx `),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("s1 "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("s2 "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"void"),s("	"),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"ft_memchr"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),s("s"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" c"),n("span",{class:"token punctuation"},","),s(" size_t n"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),s("	"),n("span",{class:"token operator"},"*"),s("src"),n("span",{class:"token punctuation"},";"),s(`
	size_t			idx`),n("span",{class:"token punctuation"},";"),s(`

	idx `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	src `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s(" s"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("idx "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("src "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=="),s(" c"),n("span",{class:"token punctuation"},")"),s(`
			`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("src "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		idx `),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),J=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"int"),s("	"),n("span",{class:"token function"},"ft_memcmp"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),s("s1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),s("s2"),n("span",{class:"token punctuation"},","),s(" size_t n"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),s("	"),n("span",{class:"token operator"},"*"),s("us1"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),s("	"),n("span",{class:"token operator"},"*"),s("us2"),n("span",{class:"token punctuation"},";"),s(`
	size_t			idx`),n("span",{class:"token punctuation"},";"),s(`

	us1 `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("s1"),n("span",{class:"token punctuation"},";"),s(`
	us2 `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"unsigned"),s(),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("s2"),n("span",{class:"token punctuation"},";"),s(`
	idx `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("idx "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("us1 "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("us2 "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
			`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("us1 "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("us2 "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		idx `),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"char"),s("	"),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"ft_strnstr"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),s("haystack"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),s("needle"),n("span",{class:"token punctuation"},","),s(" size_t len"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"char"),s("	"),n("span",{class:"token operator"},"*"),s("src"),n("span",{class:"token punctuation"},";"),s(`
	size_t		len_needle`),n("span",{class:"token punctuation"},";"),s(`
	size_t		idx`),n("span",{class:"token punctuation"},";"),s(`

	src `),n("span",{class:"token operator"},"="),s(" haystack"),n("span",{class:"token punctuation"},";"),s(`
	len_needle `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"ft_strlen"),n("span",{class:"token punctuation"},"("),s("needle"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	idx `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("len "),n("span",{class:"token operator"},"<"),s(" len_needle"),n("span",{class:"token punctuation"},")"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("src "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&&"),s(" idx "),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token punctuation"},"("),s("len "),n("span",{class:"token operator"},"-"),s(" len_needle"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token function"},"strncmp"),n("span",{class:"token punctuation"},"("),s("src "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},","),s(" needle"),n("span",{class:"token punctuation"},","),s(" len_needle"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
			`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),s("src "),n("span",{class:"token operator"},"+"),s(" idx"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		idx `),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("h4",{id:"ft-stdlib-c",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ft-stdlib-c","aria-hidden":"true"},"#"),s(" ft_stdlib.c")],-1),X=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"int"),s("	"),n("span",{class:"token function"},"ft_atoi"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),s("str"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"int"),s("	ret"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"int"),s("	factor"),n("span",{class:"token punctuation"},";"),s(`

	ret `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	factor `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token char"},"'\\t'"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token operator"},"*"),s("str "),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token char"},"' '"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token operator"},"*"),s("str "),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token char"},"'\\n'"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token operator"},"*"),s(`str
		`),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token char"},"'\\v'"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token operator"},"*"),s("str "),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token char"},"'\\f'"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token operator"},"*"),s("str "),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token char"},"'\\r'"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token operator"},"*"),s("str"),n("span",{class:"token punctuation"},")"),s(`
		str `),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token char"},"'-'"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token operator"},"*"),s("str "),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token char"},"'+'"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token operator"},"*"),s("str"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token char"},"'-'"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token operator"},"*"),s("str"),n("span",{class:"token punctuation"},")"),s(`
			factor `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"-"),s("factor"),n("span",{class:"token punctuation"},";"),s(`
		str `),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token char"},"'\\0'"),s(),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token operator"},"*"),s("str"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token char"},"'0'"),s(),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token operator"},"*"),s("str "),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token char"},"'9'"),s(),n("span",{class:"token operator"},">="),s(),n("span",{class:"token operator"},"*"),s("str"),n("span",{class:"token punctuation"},")"),s(`
		`),n("span",{class:"token punctuation"},"{"),s(`
			ret `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("ret "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"10"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("str "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token char"},"'0'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"else"),s(`
			`),n("span",{class:"token keyword"},"break"),s(),n("span",{class:"token punctuation"},";"),s(`
		str `),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("ret "),n("span",{class:"token operator"},"*"),s(" factor"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),K=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"void"),s("	"),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"ft_calloc"),n("span",{class:"token punctuation"},"("),s("size_t count"),n("span",{class:"token punctuation"},","),s(" size_t size"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"malloc"),n("span",{class:"token punctuation"},"("),s("count "),n("span",{class:"token operator"},"*"),s(" size"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Q=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"char"),s("	"),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"ft_strdup"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"char"),s(),n("span",{class:"token operator"},"*"),s("s1"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"int"),s("		i"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"char"),s("	"),n("span",{class:"token operator"},"*"),s("ret"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"NULL"),s(),n("span",{class:"token operator"},"=="),s(" s1"),n("span",{class:"token punctuation"},")"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	i `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("s1 "),n("span",{class:"token operator"},"+"),s(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
		i `),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
	ret `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"malloc"),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	i `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("s1 "),n("span",{class:"token operator"},"+"),s(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("ret "),n("span",{class:"token operator"},"+"),s(" i"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("s1 "),n("span",{class:"token operator"},"+"),s(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		i `),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("ret "),n("span",{class:"token operator"},"+"),s(" i"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token char"},"'\\0'"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("ret"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Z=l(`<h4 id="test-code" tabindex="-1"><a class="header-anchor" href="#test-code" aria-hidden="true">#</a> Test code</h4><details class="hint-container details"><summary>Details</summary><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;libft.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">void</span>	<span class="token function">output_ret</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">int</span> rc<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rc<span class="token punctuation">)</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s passed\\n&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s failed\\n&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span>	<span class="token function">test_ctype</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span>	rc<span class="token punctuation">;</span>
	
	rc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		rc <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">b</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">output_ret</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//int		ft_isalpha(int c);</span>
<span class="token keyword">void</span>	<span class="token function">test_isalpha</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">test_ctype</span><span class="token punctuation">(</span><span class="token string">&quot;isalpha&quot;</span><span class="token punctuation">,</span> ft_isalpha<span class="token punctuation">,</span> isalpha<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//int		ft_isdigit(int c);</span>
<span class="token keyword">void</span>	<span class="token function">test_isdigit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">test_ctype</span><span class="token punctuation">(</span><span class="token string">&quot;isdigit&quot;</span><span class="token punctuation">,</span> ft_isdigit<span class="token punctuation">,</span> isdigit<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//int		ft_isalnum(int c);</span>
<span class="token keyword">void</span>	<span class="token function">test_isalnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">test_ctype</span><span class="token punctuation">(</span><span class="token string">&quot;isalnum&quot;</span><span class="token punctuation">,</span> ft_isalnum<span class="token punctuation">,</span> isalnum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//int		ft_isascii(int c);</span>
<span class="token keyword">void</span>	<span class="token function">test_isascii</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">test_ctype</span><span class="token punctuation">(</span><span class="token string">&quot;isascii&quot;</span><span class="token punctuation">,</span> ft_isascii<span class="token punctuation">,</span> isascii<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//int		ft_isprint(int c);</span>
<span class="token keyword">void</span>	<span class="token function">test_isprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">test_ctype</span><span class="token punctuation">(</span><span class="token string">&quot;isprint&quot;</span><span class="token punctuation">,</span> ft_isprint<span class="token punctuation">,</span> isprint<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>



<span class="token comment">//size_t	ft_strlen(const char *s);</span>
<span class="token keyword">void</span>	<span class="token function">test_strlen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span>	rc<span class="token punctuation">;</span>
	
	rc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">ft_strlen</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">ft_strlen</span><span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">ft_strlen</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">ft_strlen</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">output_ret</span><span class="token punctuation">(</span><span class="token string">&quot;strlen&quot;</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//void	*ft_memset(void *b, int c, size_t len);</span>
<span class="token keyword">void</span> <span class="token function">test_memset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span>	rc<span class="token punctuation">;</span>

	<span class="token comment">//printf(&quot;memset a[49]:%d a[50]:%d a[51]:%d \\n&quot;, a[49], a[50], a[51]);</span>
	<span class="token comment">//printf(&quot;memset b[49]:%d b[50]:%d b[51]:%d \\n&quot;, b[49], b[50], b[51]);</span>
	rc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token function">ft_memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token function">ft_strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">ft_strlen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//printf(&quot;memset a[49]:%d a[50]:%d a[51]:%d \\n&quot;, a[49], a[50], a[51]);</span>
	<span class="token comment">//printf(&quot;memset b[49]:%d b[50]:%d b[51]:%d \\n&quot;, b[49], b[50], b[51]);</span>
	
	<span class="token function">ft_memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//printf(&quot;memset a[49]:%d a[50]:%d a[51]:%d \\n&quot;, a[49], a[50], a[51]);</span>
	<span class="token comment">//printf(&quot;memset b[49]:%d b[50]:%d b[51]:%d \\n&quot;, b[49], b[50], b[51]);</span>
	rc <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token function">ft_strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">ft_strlen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">output_ret</span><span class="token punctuation">(</span><span class="token string">&quot;memset&quot;</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//void	ft_bzero(void *s, size_t n);</span>
<span class="token keyword">void</span>	<span class="token function">test_bzero</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> rc<span class="token punctuation">;</span>

	rc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token function">ft_memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">ft_memset</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		rc <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">bzero</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">ft_bzero</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		rc <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//printf(&quot;%d %d %d\\n&quot;, a[0], a[1], a[2]);</span>
	<span class="token comment">//printf(&quot;%d %d %d\\n&quot;, b[0], b[1], b[2]);</span>

	<span class="token function">output_ret</span><span class="token punctuation">(</span><span class="token string">&quot;bzero&quot;</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//void	*ft_memcpy(void *restrict dst, const void *restrict src, size_t n);</span>
<span class="token keyword">void</span>	<span class="token function">test_memcpy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> rc<span class="token punctuation">;</span>
	<span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;I&#39;m the world&quot;</span><span class="token punctuation">;</span>

	<span class="token function">ft_memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">ft_memset</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	rc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token function">ft_memcpy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">ft_memcpy</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> b<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		rc <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">output_ret</span><span class="token punctuation">(</span><span class="token string">&quot;memcpy&quot;</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//void	*ft_memmove(void *dst, const void *src, size_t len);</span>
<span class="token keyword">void</span>	<span class="token function">test_memmove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;0123456789&quot;</span><span class="token punctuation">;</span>
	<span class="token function">memmove</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//memmove(a, a + 3, 5);</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s   %s\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//size_t	ft_strlcpy(</span>
<span class="token comment">//			char *restrict dst,</span>
<span class="token comment">//			const char *restrict src,</span>
<span class="token comment">//			size_t dstsize);</span>
<span class="token keyword">void</span>	<span class="token function">test_strlcpy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;----------strlcpy-----------\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;I&#39;m the world!&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token function">ft_memset</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">ft_strlcpy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %d\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">ft_memset</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	ret <span class="token operator">=</span> <span class="token function">strlcpy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %d\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;----------end: strlcpy-----------\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//size_t	ft_strlcat(</span>
<span class="token comment">//			char *restrict dst,</span>
<span class="token comment">//			const char *restrict src,</span>
<span class="token comment">//			size_t dstsize);</span>
<span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span>size_t dstsize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;0123456789abd&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;0123456789abd&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;0123456789abcde&quot;</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token function">ft_memset</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token function">ft_strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">-</span> <span class="token function">ft_strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">ft_memset</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token function">ft_strlen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">-</span> <span class="token function">ft_strlen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> size   <span class="token operator">=</span>    <span class="token function">strlcat</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> dstsize<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> sizeft <span class="token operator">=</span> <span class="token function">ft_strlcat</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> b<span class="token punctuation">,</span> dstsize<span class="token punctuation">)</span><span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> sizeft<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//printf(&quot;dstsize: %ld   cat: %d  ft_cat:%d  \\n&quot;, dstsize, size, sizeft);</span>
	ret <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span>	<span class="token function">test_strlcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		rc <span class="token operator">&amp;=</span> <span class="token function">test</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">output_ret</span><span class="token punctuation">(</span><span class="token string">&quot;strlcat&quot;</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//int		ft_toupper(int c);</span>
<span class="token keyword">void</span>	<span class="token function">test_toupper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		rc <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token function">ft_toupper</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">toupper</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">output_ret</span><span class="token punctuation">(</span><span class="token string">&quot;toupper&quot;</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//int		ft_tolower(int c);</span>
<span class="token keyword">void</span>	<span class="token function">test_tolower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		rc <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token function">ft_tolower</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">tolower</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">output_ret</span><span class="token punctuation">(</span><span class="token string">&quot;tolower&quot;</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//char	*ft_strchr(const char *s, int c);;</span>
<span class="token keyword">void</span>	<span class="token function">test_strchr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;abcdefghi&quot;</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span>
		rc <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token function">ft_strchr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">strchr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">output_ret</span><span class="token punctuation">(</span><span class="token string">&quot;strchr&quot;</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//char	*ft_strrchr(const char *s, int c);;</span>
<span class="token keyword">void</span>	<span class="token function">test_strrchr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;abcdefghi&quot;</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span>
		rc <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token function">ft_strrchr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">strrchr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">output_ret</span><span class="token punctuation">(</span><span class="token string">&quot;strrchr&quot;</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//int		ft_strncmp(const char *s1, const char*s2, size_t n);</span>
<span class="token keyword">int</span> <span class="token function">ncmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s2<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret1 <span class="token operator">=</span> <span class="token function">ft_strncmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret2 <span class="token operator">=</span>    <span class="token function">strncmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//printf(&quot;size: %ld   ft_ret:%d  ret:%d  s1:%s  s2:%s\\n&quot;, n, ret1, ret2, s1, s2);</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>ret1 <span class="token operator">==</span> ret2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span>	<span class="token function">test_strncmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>	
	<span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token function">ncmp</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token function">ncmp</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token function">ncmp</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token function">ncmp</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token function">ncmp</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token function">ncmp</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cd&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//rc &amp;= (ft_strncmp(&quot;&quot;, &quot;&quot;, 1) == strncmp(&quot;&quot;, &quot;&quot;, 1));</span>
	<span class="token comment">//rc &amp;= (ft_strncmp(&quot;abc&quot;, &quot;abc&quot;, 0) == strncmp(&quot;abc&quot;, &quot;abc&quot;, 0));</span>
	<span class="token comment">//rc &amp;= (ft_strncmp(&quot;ab&quot;, &quot;abc&quot;, 2) == strncmp(&quot;ab&quot;, &quot;abc&quot;, 2));</span>
	<span class="token comment">//rc &amp;= (ft_strncmp(&quot;ab&quot;, &quot;abc&quot;, 3) == strncmp(&quot;ab&quot;, &quot;abc&quot;, 3));</span>
	<span class="token comment">//rc &amp;= (ft_strncmp(&quot;ab&quot;, &quot;cd&quot;, 1) == strncmp(&quot;ab&quot;, &quot;cd&quot;, 1));</span>
	<span class="token function">output_ret</span><span class="token punctuation">(</span><span class="token string">&quot;strcmp&quot;</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//void	*ft_memchr(const void *s, int c, size_t n);</span>
<span class="token keyword">void</span>	<span class="token function">test_memchr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> ret<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		rc <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token function">ft_memchr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>ret<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">memchr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> ret<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//ft_memchr((void*)ret, i, 7);</span>
	<span class="token punctuation">}</span>
	<span class="token function">output_ret</span><span class="token punctuation">(</span><span class="token string">&quot;memchr&quot;</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//int		ft_memcmp(const void *s1, const void *s2, size_t n);</span>
<span class="token keyword">void</span>		<span class="token function">test_memcmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> ret<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> ret1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		rc <span class="token operator">&amp;=</span> <span class="token punctuation">(</span><span class="token function">ft_memcmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>ret<span class="token punctuation">,</span> ret1<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">memcmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> ret<span class="token punctuation">,</span> ret1<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">output_ret</span><span class="token punctuation">(</span><span class="token string">&quot;memcmp&quot;</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//char	*ft_strnstr(const char *haystack, const char *needle, size_t len);</span>
<span class="token keyword">void</span>	<span class="token function">test_strnstr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> stack<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;12345678900&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> substr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;89&quot;</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">char</span> <span class="token operator">*</span> ret1 <span class="token operator">=</span> <span class="token function">ft_strnstr</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> substr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">char</span> <span class="token operator">*</span> ret2 <span class="token operator">=</span> <span class="token function">strnstr</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> substr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;stack: %s substr:%s  len:%d    ft_ret:%s   ret:%s\\n&quot;</span><span class="token punctuation">,</span> stack<span class="token punctuation">,</span> substr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ret1<span class="token punctuation">,</span> ret2<span class="token punctuation">)</span><span class="token punctuation">;</span>
		rc <span class="token operator">&amp;=</span> <span class="token punctuation">(</span> ret1 <span class="token operator">==</span> ret2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">output_ret</span><span class="token punctuation">(</span><span class="token string">&quot;strnstr&quot;</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//int		ft_atoi(char *str);</span>
<span class="token keyword">int</span>	<span class="token function">t_atoi</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ftret <span class="token operator">=</span> <span class="token function">ft_atoi</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//printf(&quot;%s   fret:%d   ret:%d\\n&quot;, s1, ftret, ret);</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>ftret <span class="token operator">==</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span>	<span class="token function">test_atoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span>	rc<span class="token punctuation">;</span>

	rc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token function">t_atoi</span><span class="token punctuation">(</span><span class="token string">&quot;-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token function">t_atoi</span><span class="token punctuation">(</span><span class="token string">&quot;\\t\\f -1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token function">t_atoi</span><span class="token punctuation">(</span><span class="token string">&quot;--1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token function">t_atoi</span><span class="token punctuation">(</span><span class="token string">&quot;1000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token function">t_atoi</span><span class="token punctuation">(</span><span class="token string">&quot;-1000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token function">t_atoi</span><span class="token punctuation">(</span><span class="token string">&quot;+1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token function">t_atoi</span><span class="token punctuation">(</span><span class="token string">&quot;+11&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	rc <span class="token operator">&amp;=</span> <span class="token function">t_atoi</span><span class="token punctuation">(</span><span class="token string">&quot;+ 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">output_ret</span><span class="token punctuation">(</span><span class="token string">&quot;atoi&quot;</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//void	*ft_calloc(size_t count, size_t size);</span>
<span class="token keyword">void</span>	<span class="token function">test_calloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token function">ft_calloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>d <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">ft_memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">ft_memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">ft_memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">ft_memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">output_ret</span><span class="token punctuation">(</span><span class="token string">&quot;calloc&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token function">ft_memcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//char	*ft_strdup(const char *s1);</span>
<span class="token keyword">int</span>	<span class="token function">t_strdup</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token function">ft_memcmp</span><span class="token punctuation">(</span><span class="token function">ft_strdup</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">strdup</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ft_strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span>	<span class="token function">test_strdup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	ret <span class="token operator">&amp;=</span> <span class="token function">t_strdup</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	ret <span class="token operator">&amp;=</span> <span class="token function">t_strdup</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	ret <span class="token operator">&amp;=</span> <span class="token function">t_strdup</span><span class="token punctuation">(</span><span class="token string">&quot;1234&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	ret <span class="token operator">&amp;=</span> <span class="token function">t_strdup</span><span class="token punctuation">(</span><span class="token string">&quot;aibdfse&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	ret <span class="token operator">&amp;=</span> <span class="token function">t_strdup</span><span class="token punctuation">(</span><span class="token string">&quot;afasefs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	ret <span class="token operator">&amp;=</span> <span class="token function">t_strdup</span><span class="token punctuation">(</span><span class="token string">&quot;asfeefef&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">output_ret</span><span class="token punctuation">(</span><span class="token string">&quot;strdup&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">test_isalpha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_isdigit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_isalnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_isascii</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_isprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_strlen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_memset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_bzero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_memcpy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_memmove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_strlcpy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_strlcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_toupper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_tolower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_strrchr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_strncmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_memchr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_memcmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_strnstr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_atoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_calloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test_strdup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="part2-additional-functions-1" tabindex="-1"><a class="header-anchor" href="#part2-additional-functions-1" aria-hidden="true">#</a> Part2: Additional Functions</h3><p>When analyse the functions, it can easily find that the 7 functions are all about the operation on string, the last 4 functions are about output. So the eleven functions will be seperated into 2 groups which will store with 3 files, ft_part2_str1.c, ft_part2_str2.c, ft_part2_fd.c</p><table><thead><tr><th>ft_part2_str1.c</th><th>ft_part2_str2.c</th><th>ft_part2_fd.c</th></tr></thead><tbody><tr><td>ft_substr</td><td>ft_strmapi</td><td>ft_putchar_fd</td></tr><tr><td>ft_strjoin</td><td>ft_striteri</td><td>ft_putstr_fd</td></tr><tr><td>ft_strtrim</td><td>-</td><td>ft_putendl_fd</td></tr><tr><td>ft_split</td><td>-</td><td>ft_putnbr_fd</td></tr><tr><td>-</td><td>ft_itoa</td><td>-</td></tr></tbody></table><h3 id="part3-bonus-part" tabindex="-1"><a class="header-anchor" href="#part3-bonus-part" aria-hidden="true">#</a> Part3: Bonus part</h3>`,6);function H($,nn){const i=c("PDF"),u=c("Mermaid"),r=c("ExternalLinkIcon"),o=c("CodeTabs");return d(),m("div",null,[b,f,p(i,{url:"/data/42adelaide/libft.pdf",ratio:"1.4"}),h,p(u,{id:"mermaid-11",code:"eJxdj7EOwjAMRPd8hSfUDvkBhkoMwIIYKhbG0Do0UppUtiuEqv47pnSo8GLp7tmns9YaCRJxD7cOYaDcIDP4TBDDw4v5Aj7mV9M5ErjUBnQIXVsUh+TimwOXpbWVD6llaqaTbqiR5wVcVbD2jqyUXo6Mf9Y1/5zQDxF7TLJmKAm7ra5sBSEJ0pOchJwWcCssxDG103RGAdFGGuOiPuExyjybD+H4Te4="}),_,n("h3",y,[w,s(" Part1 ("),n("a",g,[s("libc functions"),p(r)]),s(")")]),q,p(o,{id:"953",data:[{id:"ft_isalpha"},{id:"ft_isdigit"},{id:"ft_isalnum"},{id:"ft_isascii"},{id:"ft_isprint"}],"tab-id":"ft_ctype.c"},{title0:a(({value:t,isActive:e})=>[s("ft_isalpha")]),title1:a(({value:t,isActive:e})=>[s("ft_isdigit")]),title2:a(({value:t,isActive:e})=>[s("ft_isalnum")]),title3:a(({value:t,isActive:e})=>[s("ft_isascii")]),title4:a(({value:t,isActive:e})=>[s("ft_isprint")]),tab0:a(({value:t,isActive:e})=>[x]),tab1:a(({value:t,isActive:e})=>[z]),tab2:a(({value:t,isActive:e})=>[A]),tab3:a(({value:t,isActive:e})=>[N]),tab4:a(({value:t,isActive:e})=>[j]),_:1}),L,p(o,{id:"973",data:[{id:"ft_strlen"},{id:"ft_memset"},{id:"ft_bzero"},{id:"ft_memcpy"},{id:"ft_memmove"}],"tab-id":"ft_string_1.c"},{title0:a(({value:t,isActive:e})=>[s("ft_strlen")]),title1:a(({value:t,isActive:e})=>[s("ft_memset")]),title2:a(({value:t,isActive:e})=>[s("ft_bzero")]),title3:a(({value:t,isActive:e})=>[s("ft_memcpy")]),title4:a(({value:t,isActive:e})=>[s("ft_memmove")]),tab0:a(({value:t,isActive:e})=>[M]),tab1:a(({value:t,isActive:e})=>[T]),tab2:a(({value:t,isActive:e})=>[D]),tab3:a(({value:t,isActive:e})=>[C]),tab4:a(({value:t,isActive:e})=>[U]),_:1}),P,p(o,{id:"993",data:[{id:"ft_strlcpy"},{id:"ft_strlcat"},{id:"ft_toupper"},{id:"ft_tolower"},{id:"ft_strchr"}],"tab-id":"ft_string_2.c"},{title0:a(({value:t,isActive:e})=>[s("ft_strlcpy")]),title1:a(({value:t,isActive:e})=>[s("ft_strlcat")]),title2:a(({value:t,isActive:e})=>[s("ft_toupper")]),title3:a(({value:t,isActive:e})=>[s("ft_tolower")]),title4:a(({value:t,isActive:e})=>[s("ft_strchr")]),tab0:a(({value:t,isActive:e})=>[I]),tab1:a(({value:t,isActive:e})=>[E]),tab2:a(({value:t,isActive:e})=>[B]),tab3:a(({value:t,isActive:e})=>[V]),tab4:a(({value:t,isActive:e})=>[Y]),_:1}),F,p(o,{id:"1013",data:[{id:"ft_strrchr"},{id:"ft_strncmp"},{id:"ft_memchr"},{id:"ft_memcmp"},{id:"ft_strnstr"}],"tab-id":"ft_string_3.c"},{title0:a(({value:t,isActive:e})=>[s("ft_strrchr")]),title1:a(({value:t,isActive:e})=>[s("ft_strncmp")]),title2:a(({value:t,isActive:e})=>[s("ft_memchr")]),title3:a(({value:t,isActive:e})=>[s("ft_memcmp")]),title4:a(({value:t,isActive:e})=>[s("ft_strnstr")]),tab0:a(({value:t,isActive:e})=>[W]),tab1:a(({value:t,isActive:e})=>[G]),tab2:a(({value:t,isActive:e})=>[O]),tab3:a(({value:t,isActive:e})=>[J]),tab4:a(({value:t,isActive:e})=>[R]),_:1}),S,p(o,{id:"1033",data:[{id:"ft_atoi"},{id:"ft_calloc"},{id:"ft_strdup"}],"tab-id":"ft_stdlib.c"},{title0:a(({value:t,isActive:e})=>[s("ft_atoi")]),title1:a(({value:t,isActive:e})=>[s("ft_calloc")]),title2:a(({value:t,isActive:e})=>[s("ft_strdup")]),tab0:a(({value:t,isActive:e})=>[X]),tab1:a(({value:t,isActive:e})=>[K]),tab2:a(({value:t,isActive:e})=>[Q]),_:1}),Z])}const tn=k(v,[["render",H],["__file","libft.html.vue"]]);export{tn as default};
